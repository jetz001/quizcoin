// This is your Prisma schema file for SQLite (easier testing)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Question {
  id            String   @id @default(cuid())
  quizId        String   @unique
  batchId       String?
  question      String
  options       String   // JSON string for SQLite
  answerIndex   Int
  correctAnswer String
  difficulty    Int      @default(1)
  mode          String   @default("solo")
  category      String   @default("general")
  createdAt     DateTime @default(now())
  isAnswered    Boolean  @default(false)
  totalAnswers  Int      @default(0)
  correctAnswers Int     @default(0)
  status        String   @default("active")
  firstSolverAddress String?
  firstCorrectAnswerTime DateTime?
  
  // Relations
  userAnswers   UserAnswer[]
  merkleLeaves  MerkleLeaf[]
  
  @@map("questions")
}

model MerkleLeaf {
  id            String   @id @default(cuid())
  batchId       Int
  leaf          String
  quizId        String
  correctAnswer String
  answerHash    String
  createdAt     DateTime @default(now())
  status        String   @default("active")
  
  // Relations
  question      Question @relation(fields: [quizId], references: [quizId])
  batch         MerkleBatch @relation(fields: [batchId], references: [batchId])
  
  @@map("merkle_leaves")
}

model MerkleBatch {
  id            String   @id @default(cuid())
  batchId       Int      @unique
  totalQuestions Int
  createdAt     DateTime @default(now())
  status        String   @default("generating")
  progress      Int      @default(0)
  totalCreated  Int?
  merkleRoot    String?
  leaves        String   // JSON string for SQLite
  quizIds       String   // JSON string for SQLite
  readyAt       DateTime?
  
  // Relations
  merkleLeaves  MerkleLeaf[]
  
  @@map("merkle_batches")
}

model UserAnswer {
  id            String   @id @default(cuid())
  quizId        String
  userAccount   String
  answer        String
  isCorrect     Boolean
  answeredAt    DateTime @default(now())
  merkleProof   String?
  txHash        String?
  mode          String   @default("solo")
  rewardAmount  String   @default("0")
  
  // Relations
  question      Question @relation(fields: [quizId], references: [quizId])
  
  @@map("user_answers")
}
